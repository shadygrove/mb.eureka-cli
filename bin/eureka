#!/usr/bin/env node

const program = require('commander');
const api = require('../');

if (!process.env.EUREKA_SERVER) {
    api.log.warn('Please set environment variable, EUREKA_SERVER. (eg=> export EUREKA_SERVER=http://localhost:8765/eureka');
    process.exit(1);
}

const eureka = api.eureka({ 
    host: process.env.EUREKA_SERVER
});

// add example to help
program.on('--help', function() {
    api.log.info('');
    api.log.info('Examples:');
    api.log.info('  $ eureka tunnel my-space -j myjumpserve.com -e eureka.myhost.com -ep 8761 -lp 1234 -p key.pem');
    api.log.info('  $ eureka ls');
});

// handle unknown commands
program.on('command:*', function () {
    api.log.error('Invalid command: %s\nSee --help for a list of available commands.', program.args.join(' '));
    process.exit(1);
});

program
    .command('apps')
    .description('List app names')
    .option('-l, --log-level <logLevel>', 'low (default), medium, high')
    .action((options) => {
        api.log.debug('options', options.logLevel);

        eureka.apps()
            .then((res) => {
                let result = res.applications.application
                                .sort(alphaASC);

                switch (options.logLevel) {
                    case "medium": 
                        result = result.map(app => {
                            const { name } = app;
                            const medResult = { name };
                            medResult.instances = app.instance.map((i) => { 
                                    const { instanceId, hostName } = i;
                                    return { instanceId, hostName };
                                });
                            
                            return medResult;

                        });
                        break;
                    case "high":
                        result = result.map((app) => app);
                        break;
                    case "low":
                    default:
                        result = result.forEach(app => { api.log.log(app.name) });
                        break;
                }

                api.log.log(stringify(result));
            })
            .catch((err) => {
                api.log.error(err);
            });
    });

program
    .command('app <app-id>')
    .description('Show app info')
    .option('-l, --log-level <logLevel>', 'low (default), medium, high')
    .action((appId, options) => {
        api.log.info('appId', appId);

        eureka.app(appId)
            .then((res) => {
                let result = res;
                api.log.log(stringify(result));
            })
            .catch((err) => {
                api.log.error(err);
            });
    });

program
    .command('app-instance <app-id> <instance-id>')
    .description('Show instance info')
    .action((appId, instanceId) => {
        api.log.info('appId', appId);
        api.log.info('instanceId', instanceId);
        
        eureka.appInstance(appId, instanceId)
            .then((res) => {
                let result = res;
                api.log.log(stringify(result));
            })
            .catch((err) => {
                api.log.error(err);
            });
    });

program
    .command('instance <instance-id>')
    .description('Show instance info')
    .action((instanceId) => {
        api.log.info('instanceId', instanceId);
        
        eureka.instance(instanceId)
            .then((res) => {
                let result = res;
                api.log.log(stringify(result));
            })
            .catch((err) => {
                api.log.error(err);
            });
    });

program
    .command('tunnel')
    .description('Tunnel to a eureka instance')
    .option('-j, --jumpServer <jumpServer>', 'Jump server host/ip')
    .option('-e, --eurekaServer <eurekaServer>', 'Eureka server host/ip')
    .option('-ep, --eurekaPort <eurekaPort>', 'Eureka port')
    .option('-lp, --localPort <localPort>', 'Local port to forward')
    .option('-p, --pemFile <pemFile>', '.pem file location')
    .on('--help', function(){
        api.log.info('');
        api.log.info('Examples:');
        api.log.info('  $ eureka tunnel my-space -j myjumpserve.com -e eureka.myhost.com -ep 8761 -lp 1234 -p key.pem');
    })
    .action((options, cmd) => {
        if (!options.jumpServer
            && !options.eurekaServer
            && !options.eurekaPort
            && !options.localPort
            && !options.pemFile) {
                api.log.warn('all options required');
                cmd.outputHelp()
                return;
            }
        
        api.log.info('Opening tunnel...');

        api.tunnel.openTunnel(
            options.jumpServer, 
            options.eurekaServer, 
            options.localPort, 
            options.eurekaPort, 
            options.pemFile
        );

        process.on('exit', (code) => {
            api.log.warn('Exiting...', code);
            api.tunnel.closeTunnel();
        })
    });

program
    .parse(process.argv);



function stringify (obj) {
    return JSON.stringify(obj, null, 4);
}
    
function alphaASC (a, b) {
    var nameA = a.name.toUpperCase(); // ignore upper and lowercase
    var nameB = b.name.toUpperCase(); // ignore upper and lowercase
    if (nameA < nameB) {
      return -1;
    }
    if (nameA > nameB) {
      return 1;
    }
  
    // names must be equal
    return 0;
};
